from aiogram.types import (
    CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from database.orm_query import orm_get_user, orm_get_salon_by_id
from utils.orders import get_order_summary


def get_contact_kb(user_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(
                text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É",
                url=f"tg://user?id={user_id}"
            )
        ]]
    )


# utils/notifications.py
async def notify_salon_about_order(
    callback: CallbackQuery,
    state: FSMContext,
    session: AsyncSession,
) -> None:
    data    = await state.get_data()
    user_id = callback.from_user.id
    phone   = data.get("phone") or "–ù–µ—Ç –Ω–æ–º–µ—Ä–∞"

    user = await orm_get_user(session, user_id)
    if not user or not user.salon_id:
        print(f"[notify] salon_id –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è user_id={user_id}")
        return

    salon = await orm_get_salon_by_id(session, user.salon_id)
    if not salon or not salon.group_chat_id:
        print(f"[notify] group_chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è salon_id={user.salon_id}")
        return

    # ---------- —á–µ–∫ –¥–ª—è –≥—Ä—É–ø–ø—ã —Å–∞–ª–æ–Ω–∞ ----------
    group_summary = await get_order_summary(
        session, user_id, user.salon_id, data, for_group=True
    )
    await callback.bot.send_message(
        salon.group_chat_id,
        group_summary,
        parse_mode="HTML",
        reply_markup=get_contact_kb(user_id)
    )

    # ---------- –∫–æ–Ω—Ç–∞–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞ ----------
    if phone and phone != "–ù–µ—Ç –Ω–æ–º–µ—Ä–∞":
        try:
            await callback.bot.send_contact(
                chat_id=salon.group_chat_id,
                phone_number=phone,
                first_name=user.first_name or "–ö–ª–∏–µ–Ω—Ç"
            )
        except Exception as e:
            print(f"[notify] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ contact: {e}")

