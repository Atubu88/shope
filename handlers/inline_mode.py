# handlers/inline_mode.py
# ---------------------------------------------------------------------------
# –ò–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º ¬´–º–Ω–æ–≥–æ—Å–∞–ª–æ–Ω–Ω–æ–π¬ª –≤–µ—Ä—Å–∏–∏: –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–º
# –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∞–ª–æ–Ω–æ–≤.  –í –∑–∞–ø—Ä–æ—Å–µ –æ–Ω *–º–æ–∂–µ—Ç* —É—Ç–æ—á–Ω–∏—Ç—å –Ω—É–∂–Ω—ã–π —Å–∞–ª–æ–Ω –∏/–∏–ª–∏
# –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –Ω–æ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –±–æ—Ç —Å—Ç–∞—Ä–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å —Å–∞–ª–æ–Ω —Å–∞–º.
# ---------------------------------------------------------------------------

from aiogram import Router
from aiogram.types import (
    InlineQuery,
    InlineQueryResultArticle,
    InputTextMessageContent,
)
from sqlalchemy.ext.asyncio import AsyncSession

from database.orm_query import (
    orm_get_user_salons,
    orm_get_products,
    orm_get_categories,
    orm_get_salon_by_id,
)
from utils.currency import get_currency_symbol

inline_router = Router()

# ---------- Telegram-—Ñ–∞–π–ª—ã: –∫—ç—à –ø—Ä–µ–≤—å—é ------------------------------------
THUMB_CACHE: dict[str, str] = {}          # {file_id: ready_url}


async def _tg_file_url(bot, file_id: str) -> str:
    file = await bot.get_file(file_id)
    return f"https://api.telegram.org/file/bot{bot.token}/{file.file_path}"


async def _thumb(bot, file_id: str) -> str:
    if file_id not in THUMB_CACHE:
        THUMB_CACHE[file_id] = await _tg_file_url(bot, file_id)
    return THUMB_CACHE[file_id]


# ---------- –ò–Ω–ª–∞–π–Ω-–æ—Ç–≤–µ—Ç ---------------------------------------------------
@inline_router.inline_query()
async def answer_products_inline(inline_query: InlineQuery, session: AsyncSession) -> None:
    """
    –û—Ç–¥–∞—ë—Ç —Ç–æ–≤–∞—Ä—ã –≤ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ —Å —É—á—ë—Ç–æ–º ¬´–º–Ω–æ–≥–æ—Å–∞–ª–æ–Ω–Ω–æ—Å—Ç–∏¬ª.

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —à–∞–±–ª–æ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞:
      ‚Ä¢ ``""`` (–ø—É—Å—Ç–æ)                     ‚Üí —Å–∞–ª–æ–Ω –≤—ã–±–µ—Ä–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      ‚Ä¢ ``salon_<id>``                    ‚Üí –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∞–ª–æ–Ω
      ‚Ä¢ ``salon_<id> cat_<id>``           ‚Üí –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∞–ª–æ–Ω + –∫–∞—Ç–µ–≥–æ—Ä–∏—è
      ‚Ä¢ ``cat_<id>``                      ‚Üí —Ç–µ–∫—É—â–∏–π / –∞–≤—Ç–æ-–≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∞–ª–æ–Ω,
                                            –Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    """

    user_id = inline_query.from_user.id
    user_salons = await orm_get_user_salons(session, user_id)   # List[UserSalon]

    # ‚îÄ‚îÄ 1. –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ --------------------------------------
    q = inline_query.query.strip()
    salon_id: int | None = None
    category_id: int | None = None

    for part in q.split():
        if part.startswith("salon_"):
            try:
                salon_id = int(part.split("_", 1)[1])
            except (ValueError, IndexError):
                pass
        elif part.startswith("cat_"):
            try:
                category_id = int(part.split("_", 1)[1])
            except (ValueError, IndexError):
                pass

    # ‚îÄ‚îÄ 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∞–ª–æ–Ω --------------------------------------------
    if salon_id is None:
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏—á–µ–≥–æ –Ω–µ —É–∫–∞–∑–∞–ª ‚Üí –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–±—Ä–∞—Ç—å
        if not user_salons:                         # –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–∞–ª–æ–Ω–∞
            await inline_query.answer([], cache_time=1, is_personal=True)
            return
        elif len(user_salons) == 1:                 # —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Å–∞–ª–æ–Ω
            salon_id = user_salons[0].salon_id
        else:                                       # –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∞–ª–æ–Ω–æ–≤
            # üëâ *–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é*: –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π.
            #    –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤—ã–±–æ—Ä ¬´—Å–∞–ª–æ–Ω–∞ –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é¬ª –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
            #    –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞—è —É—Ç–æ—á–Ω–∏—Ç—å salon_<id>.
            salon_id = user_salons[0].salon_id
    else:
        # –≤ –∑–∞–ø—Ä–æ—Å–µ —É–∫–∞–∑–∞–Ω salon_<id> ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø
        if not any(us.salon_id == salon_id for us in user_salons):
            # —á—É–∂–æ–π —Å–∞–ª–æ–Ω ‚Üí –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
            await inline_query.answer([], cache_time=1, is_personal=True)
            return

    # ‚îÄ‚îÄ 3. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã ---------------------------------------------
    if category_id is not None:
        products = await orm_get_products(session, category_id, salon_id)
    else:
        products = []
        categories = await orm_get_categories(session, salon_id)
        for c in categories:
            products.extend(await orm_get_products(session, c.id, salon_id))

    salon = await orm_get_salon_by_id(session, salon_id)
    currency = get_currency_symbol(salon.currency) if salon else "RUB"

    # ‚îÄ‚îÄ 4. –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ----------------------------------------
    results = []
    for prod in products[:50]:                       # Telegram-–ª–∏–º–∏—Ç = 50
        thumb_url = (
            prod.image if str(prod.image).startswith(("http://", "https://"))
            else await _thumb(inline_query.bot, prod.image)
        )

        results.append(
            InlineQueryResultArticle(
                id=str(prod.id),
                title=prod.name,
                description=f"{float(prod.price):.2f}{currency}",
                thumbnail_url=thumb_url,
                input_message_content=InputTextMessageContent(
                    message_text=f"/product_{prod.id}",   # –Ω–∞—à–µ ¬´—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ¬ª —Å–æ–æ–±—â–µ–Ω–∏–µ
                ),
            )
        )

    # –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç ‚Äî –æ—Ç–¥–∞—ë–º ¬´–∑–∞–≥–ª—É—à–∫—É¬ª
    if not results:
        results.append(
            InlineQueryResultArticle(
                id="no_products",
                title="–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤",
                description="–í —ç—Ç–æ–º —Å–∞–ª–æ–Ω–µ/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.",
                input_message_content=InputTextMessageContent(
                    message_text="–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.",
                ),
            )
        )

    # ‚îÄ‚îÄ 5. –û—Ç–≤–µ—Ç --------------------------------------------------------
    await inline_query.answer(results, cache_time=1, is_personal=True)
