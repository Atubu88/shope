from aiogram import Router, types, F
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from handlers.menu_processing import get_menu_content
from utils.geo import haversine, calc_delivery_cost, get_address_from_coords
from database.orm_query import orm_get_user_carts, orm_get_user, orm_get_salon_by_id

order_router = Router()

class OrderStates(StatesGroup):
    choosing_delivery = State()
    entering_address = State()
    confirming_address = State()
    entering_apartment = State()     # <---- –ù–æ–≤—ã–π —à–∞–≥!
    entering_phone = State()
    confirming_order = State()

def get_delivery_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö—É—Ä—å–µ—Ä", callback_data="delivery_courier")],
        [InlineKeyboardButton(text="–°–∞–º–æ–≤—ã–≤–æ–∑", callback_data="delivery_pickup")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="back_to_cart")],
    ])

def get_confirm_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_phone")],
    ])

def geo_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def confirm_address_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="address_ok")],
        [InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="address_manual")]
    ])

async def get_order_summary(session: AsyncSession, user_id: int, salon_id: int, state_data: dict) -> str:
    cart_items = await orm_get_user_carts(session, user_id, salon_id)
    lines = []
    total = 0
    for item in cart_items:
        item_cost = item.product.price * item.quantity
        total += item_cost
        lines.append(f"- {item.product.name} {item.quantity} x {item.product.price}‚ÇΩ = {item_cost}‚ÇΩ")
    delivery_cost = int(state_data.get("delivery_cost") or 0)
    delivery_text = ""
    if state_data.get("delivery") == "delivery_courier":
        delivery_text = f"–ö—É—Ä—å–µ—Ä (+{delivery_cost}‚ÇΩ)"
    elif state_data.get("delivery") == "delivery_pickup":
        delivery_text = "–°–∞–º–æ–≤—ã–≤–æ–∑ (0‚ÇΩ)"
    else:
        delivery_text = "–ù–µ –≤—ã–±—Ä–∞–Ω"

    total_with_delivery = total + delivery_cost

    text = "–í–∞—à –∑–∞–∫–∞–∑:\n" + "\n".join(lines)
    text += f"\n\n–î–æ—Å—Ç–∞–≤–∫–∞: {delivery_text}"
    if state_data.get("address"):
        text += f"\n–ê–¥—Ä–µ—Å: {state_data['address']}"
    if state_data.get("distance_km") is not None:
        text += f"\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {state_data['distance_km']:.2f} –∫–º"
    text += f"\n\n<b>–ò—Ç–æ–≥–æ: {total_with_delivery}‚ÇΩ</b>"
    return text

# --- –°—Ç–∞—Ä—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è ---
@order_router.callback_query(F.data == "start_order")
async def start_order(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    await callback.message.delete()
    user_id = callback.from_user.id
    user = await orm_get_user(session, user_id)
    salon_id = user.salon_id if user else None

    state_data = {"delivery": None, "address": None, "delivery_cost": 0, "distance_km": None}
    summary = await get_order_summary(session, user_id, salon_id, state_data)
    msg = await callback.message.answer(
        summary + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=get_delivery_kb(),
        parse_mode="HTML"
    )
    await state.set_state(OrderStates.choosing_delivery)
    await state.update_data(
        last_msg_id=msg.message_id,
        delivery=None, address=None, delivery_cost=0, distance_km=None
    )

# --- –î–æ—Å—Ç–∞–≤–∫–∞: –ö—É—Ä—å–µ—Ä ---
@order_router.callback_query(OrderStates.choosing_delivery, F.data == "delivery_courier")
async def choose_delivery_courier(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    await state.update_data(delivery="delivery_courier", address=None, delivery_cost=0, distance_km=None)
    last_msg_id = data["last_msg_id"]

    await callback.bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=last_msg_id,
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.",
        reply_markup=None
    )
    geo_keyboard_msg = await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ ‚¨áÔ∏è",
        reply_markup=geo_keyboard()
    )
    await state.update_data(geo_msg_id=geo_keyboard_msg.message_id)
    await state.set_state(OrderStates.entering_address)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ---
@order_router.message(OrderStates.entering_address, F.location)
async def receive_location(message: types.Message, state: FSMContext, session: AsyncSession):
    user_lat = message.location.latitude
    user_lon = message.location.longitude

    data = await state.get_data()
    geo_msg_id = data.get("geo_msg_id")
    user_id = message.from_user.id
    user = await orm_get_user(session, user_id)
    salon_id = user.salon_id if user else None
    salon = await orm_get_salon_by_id(session, salon_id)
    if not salon.latitude or not salon.longitude:
        await message.answer("–û—à–∏–±–∫–∞: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∞–ª–æ–Ω–∞ –Ω–µ –∑–∞–¥–∞–Ω—ã.")
        return

    salon_lat = float(salon.latitude)
    salon_lon = float(salon.longitude)
    distance_km = haversine(salon_lat, salon_lon, user_lat, user_lon)
    delivery_cost = calc_delivery_cost(distance_km)

    # --- –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É-–∞–¥—Ä–µ—Å
    address_str = get_address_from_coords(user_lat, user_lon) or f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è ({user_lat:.5f}, {user_lon:.5f})"
    await state.update_data(address=address_str, delivery_cost=delivery_cost, distance_km=distance_km,
                            geo_lat=user_lat, geo_lon=user_lon)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    if geo_msg_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=geo_msg_id)
        except Exception:
            pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞!
    text = f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –ø–æ –∞–¥—Ä–µ—Å—É:\n<b>{address_str}</b>\n–í—Å—ë –≤–µ—Ä–Ω–æ?"
    msg = await message.answer(
        text,
        reply_markup=confirm_address_kb(),
        parse_mode="HTML"
    )
    await state.set_state(OrderStates.confirming_address)
    await state.update_data(confirm_addr_msg_id=msg.message_id)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ ---
@order_router.callback_query(OrderStates.confirming_address, F.data == "address_ok")
async def address_ok(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    last_msg_id = data.get("confirm_addr_msg_id")
    # –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∞–¥—Ä–µ—Å–∞
    try:
        await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=last_msg_id)
    except Exception:
        pass
    await state.set_state(OrderStates.entering_apartment)  # <--- –ù–æ–≤—ã–π —à–∞–≥!
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã (–∏–ª–∏ –ø–æ–¥—ä–µ–∑–¥–∞, –æ—Ñ–∏—Å–∞):",
        reply_markup=ReplyKeyboardRemove()
    )

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã ---
@order_router.message(OrderStates.entering_apartment)
async def receive_apartment(message: types.Message, state: FSMContext):
    apartment = message.text.strip()
    data = await state.get_data()
    # –î–æ–±–∞–≤–ª—è–µ–º –∫ –∞–¥—Ä–µ—Å—É
    full_address = data["address"]
    if apartment:
        full_address += f", –∫–≤./–æ—Ñ–∏—Å {apartment}"
    await state.update_data(address=full_address)
    await state.set_state(OrderStates.entering_phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ ---
@order_router.callback_query(OrderStates.confirming_address, F.data == "address_manual")
async def address_manual(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_msg_id = data.get("confirm_addr_msg_id")
    try:
        await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=last_msg_id)
    except Exception:
        pass
    await state.set_state(OrderStates.entering_address)
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é:")

# --- –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ---
@order_router.message(OrderStates.entering_phone)
async def enter_phone(message: types.Message, state: FSMContext, session: AsyncSession):
    phone = message.text.strip()
    data = await state.get_data()
    last_msg_id = data.get("last_msg_id")
    await state.update_data(phone=phone)
    await state.set_state(OrderStates.confirming_order)

    user_id = message.from_user.id
    user = await orm_get_user(session, user_id)
    salon_id = user.salon_id if user else None

    summary = await get_order_summary(session, user_id, salon_id, {**data, "phone": phone})

    # –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if last_msg_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=last_msg_id)
        except Exception:
            pass

    msg = await message.answer(
        summary + "\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑!",
        reply_markup=get_confirm_kb(),
        parse_mode="HTML"
    )
    await state.update_data(last_msg_id=msg.message_id)

# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ---
@order_router.callback_query(OrderStates.confirming_order, F.data == "confirm_order")
async def confirm_order(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    await callback.answer("–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    await callback.message.edit_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç üëç")
    await state.clear()



@order_router.callback_query(F.data == "back_to_cart")
async def back_to_cart(callback: CallbackQuery, state: FSMContext, session):
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã —á–µ—Ä–µ–∑ —Ç–≤–æ–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π get_menu_content
    # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—é –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã = 3 (–∏–ª–∏ —É —Ç–µ–±—è –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –ø–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ—ë)
    image, kbds = await get_menu_content(
        session=session,
        level=3,           # –û–±—ã—á–Ω–æ 3 ‚Äî —ç—Ç–æ –∫–æ—Ä–∑–∏–Ω–∞, –Ω–æ –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ—é –ª–æ–≥–∏–∫—É —É—Ä–æ–≤–Ω–µ–π!
        menu_name="main",  # –ò–ª–∏ "cart", –µ—Å–ª–∏ —Ç–∞–∫ —É —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä–∑–∏–Ω–∞
        page=1,
        user_id=user_id,
        product_id=None,
    )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—à—ë–ª callback (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    try:
        await callback.message.delete()
    except Exception:
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ—Ä–∑–∏–Ω—É (—Ñ–æ—Ç–æ + –ø–æ–¥–ø–∏—Å—å + –∫–Ω–æ–ø–∫–∏)
    # image ‚Äî —ç—Ç–æ InputMediaPhoto
    await callback.message.answer_photo(
        photo=image.media,          # file_id, FSInputFile –∏–ª–∏ —Å—Å—ã–ª–∫–∞
        caption=image.caption,      # –û–ø–∏—Å–∞–Ω–∏–µ, —Å–º–æ—Ç—Ä–∏ get_image_banner
        reply_markup=kbds,
        parse_mode="HTML"
    )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await state.clear()


# --- –î–æ—Å—Ç–∞–≤–∫–∞: –°–∞–º–æ–≤—ã–≤–æ–∑ ---
@order_router.callback_query(OrderStates.choosing_delivery, F.data == "delivery_pickup")
async def choose_delivery_pickup(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    last_msg_id = data["last_msg_id"]

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞: —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏, —Å—Ç–æ–∏–º–æ—Å—Ç—å = 0, –∞–¥—Ä–µ—Å = –∞–¥—Ä–µ—Å —Å–∞–ª–æ–Ω–∞
    user_id = callback.from_user.id
    user = await orm_get_user(session, user_id)
    salon_id = user.salon_id if user else None
    salon = await orm_get_salon_by_id(session, salon_id)
    address = f"{salon.name}, {salon.address}" if hasattr(salon, "address") and salon.address else "–ê–¥—Ä–µ—Å —Å–∞–ª–æ–Ω–∞ —É—Ç–æ—á–Ω–∏—Ç–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"

    await state.update_data(
        delivery="delivery_pickup",
        delivery_cost=0,
        address=address,
        distance_km=None
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    summary = await get_order_summary(session, user_id, salon_id, {
        **data,
        "delivery": "delivery_pickup",
        "delivery_cost": 0,
        "address": address,
        "distance_km": None
    })

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=last_msg_id,
            text=summary + "\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑!",
            reply_markup=get_confirm_kb(),
            parse_mode="HTML"
        )
    except Exception:
        await callback.message.answer(
            summary + "\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑!",
            reply_markup=get_confirm_kb(),
            parse_mode="HTML"
        )

    await state.set_state(OrderStates.confirming_order)
