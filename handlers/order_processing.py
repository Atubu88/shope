from aiogram import Router, types, F
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from utils.notifications import notify_salon_about_order
from utils.orders import get_order_summary
from handlers.menu_processing import get_menu_content
from utils.geo import haversine, calc_delivery_cost, get_address_from_coords
from database.orm_query import orm_get_user_carts, orm_get_user, orm_get_salon_by_id, orm_clear_cart, orm_create_order
from database.models import UserSalon

order_router = Router()

class OrderStates(StatesGroup):
    choosing_delivery = State()
    entering_address = State()
    confirming_address = State()
    entering_apartment = State()
    entering_phone = State()
    confirming_order = State()

def get_delivery_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö—É—Ä—å–µ—Ä", callback_data="delivery_courier")],
        [InlineKeyboardButton(text="–°–∞–º–æ–≤—ã–≤–æ–∑", callback_data="delivery_pickup")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="back_to_cart")],
    ])

def get_confirm_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_phone")],
    ])

def geo_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],    # ‚Üê –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –±–µ–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def confirm_address_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="address_ok")],
        [InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="address_manual")]
    ])

BACK_PHONE_TXT = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"

def phone_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                            request_contact=True)],
            [KeyboardButton(text=BACK_PHONE_TXT)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )


# --- –°—Ç–∞—Ä—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è ---
@order_router.callback_query(F.data == "start_order")
async def start_order(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    await callback.message.delete()
    user_id = callback.from_user.id
    user = await orm_get_user(session, user_id)
    user_salon_id = user.id if user else None

    state_data = {"delivery": None, "address": None, "delivery_cost": 0, "distance_km": None}
    summary = await get_order_summary(session, user_salon_id, state_data)
    msg = await callback.message.answer(
        summary + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=get_delivery_kb(),
        parse_mode="HTML"
    )
    await state.set_state(OrderStates.choosing_delivery)
    await state.update_data(
        last_msg_id=msg.message_id,
        user_salon_id=user_salon_id,
        delivery=None, address=None, delivery_cost=0, distance_km=None
    )

# --- –î–æ—Å—Ç–∞–≤–∫–∞: –ö—É—Ä—å–µ—Ä ---
@order_router.callback_query(OrderStates.choosing_delivery,
                             F.data == "delivery_courier")
async def choose_delivery_courier(callback: CallbackQuery,
                                  state: FSMContext,
                                  session: AsyncSession):

    data = await state.get_data()
    await state.update_data(delivery="delivery_courier",
                            address=None, delivery_cost=0, distance_km=None)
    last_msg_id = data["last_msg_id"]

    # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await callback.bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=last_msg_id,
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.",
        reply_markup=None
    )

    # ‚¨áÔ∏è –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É–∑—ã—Ä—ë–∫ —Å Reply‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π ‚Äî –ù–ï —É–¥–∞–ª—è–µ–º!
    geo_msg = await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ ‚¨áÔ∏è",
        reply_markup=geo_keyboard()
    )

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É–±—Ä–∞—Ç—å, –∫–æ–≥–¥–∞ –ª–æ–∫–∞—Ü–∏—è –ø—Ä–∏–¥—ë—Ç –∏–ª–∏ –Ω–∞–∂–º—É—Ç ¬´–ù–∞–∑–∞–¥¬ª
    await state.update_data(geo_msg_id=geo_msg.message_id)
    await state.set_state(OrderStates.entering_address)
    await callback.answer()



# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ---
@order_router.message(OrderStates.entering_address, F.location)
async def receive_location(message: types.Message, state: FSMContext, session: AsyncSession):
    user_lat = message.location.latitude
    user_lon = message.location.longitude

    data = await state.get_data()
    geo_msg_id  = data.get("geo_msg_id")      # üìç‚Äë—Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    last_msg_id = data.get("last_msg_id")     # ¬´–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é‚Ä¶¬ª + ¬´‚¨ÖÔ∏è‚ÄØ–ù–∞–∑–∞–¥¬ª

    # --- —Ä–∞—Å—á—ë—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ ------------------------------------------------
    user_salon_id = data.get("user_salon_id")
    user = await session.get(UserSalon, user_salon_id) if user_salon_id else await orm_get_user(session, message.from_user.id)
    salon    = await orm_get_salon_by_id(session, user.salon_id) if user else None

    if not salon.latitude or not salon.longitude:
        await message.answer("–û—à–∏–±–∫–∞: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∞–ª–æ–Ω–∞ –Ω–µ –∑–∞–¥–∞–Ω—ã.")
        return

    salon_lat = float(salon.latitude)
    salon_lon = float(salon.longitude)
    distance_km   = haversine(salon_lat, salon_lon, user_lat, user_lon)
    delivery_cost = calc_delivery_cost(distance_km)

    address_str = (
        get_address_from_coords(user_lat, user_lon)
        or f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è ({user_lat:.5f}, {user_lon:.5f})"
    )

    await state.update_data(
        address=address_str,
        delivery_cost=delivery_cost,
        distance_km=distance_km,
        geo_lat=user_lat,
        geo_lon=user_lon
    )

    # --- —á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ----------------------------------------
    if geo_msg_id:
        try:
            await message.bot.delete_message(message.chat.id, geo_msg_id)
        except Exception:
            pass

    if last_msg_id:
        try:
            # —Å–∫—Ä—ã–≤–∞–µ–º inline‚Äë–∫–Ω–æ–ø–∫—É ¬´–ù–∞–∑–∞–¥¬ª
            await message.bot.edit_message_reply_markup(
                chat_id=message.chat.id,
                message_id=last_msg_id,
                reply_markup=None
            )
        except Exception:
            pass

    # --- —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ --------------------------------
    confirm_msg = await message.answer(
        f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –ø–æ –∞–¥—Ä–µ—Å—É:\n<b>{address_str}</b>\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=confirm_address_kb(),
        parse_mode="HTML"
    )
    await state.update_data(confirm_addr_msg_id=confirm_msg.message_id)
    await state.set_state(OrderStates.confirming_address)

@order_router.message(OrderStates.entering_address, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_delivery_msg(message: types.Message,
                               state: FSMContext,
                               session: AsyncSession):

    data = await state.get_data()
    geo_msg_id  = data.get("geo_msg_id")   # üìç‚Äë—Å–æ–æ–±—â–µ–Ω–∏–µ
    last_msg_id = data.get("last_msg_id")  # ¬´–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é‚Ä¶¬ª
    apt_msg_id  = data.get("apt_msg_id")   # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏

    # —É–¥–∞–ª—è–µ–º –í–°–ï –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for mid in (geo_msg_id, last_msg_id, apt_msg_id):
        if mid:
            try:
                await message.bot.delete_message(message.chat.id, mid)
            except Exception:
                pass

    # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º apt_msg_id, —á—Ç–æ–±—ã –Ω–µ ¬´—Ç–∞—â–∏—Ç—å¬ª –µ–≥–æ –¥–∞–ª—å—à–µ
    await state.update_data(apt_msg_id=None)

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–Ω–æ–≤–æ
    user_salon_id = data.get("user_salon_id")
    summary  = await get_order_summary(session, user_salon_id, data) if user_salon_id else ""

    new_msg = await message.answer(
        summary + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=get_delivery_kb(),
        parse_mode="HTML"
    )
    await state.update_data(last_msg_id=new_msg.message_id)
    await state.set_state(OrderStates.choosing_delivery)

    # —É–±–∏—Ä–∞–µ–º Reply‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer("\u2063", reply_markup=ReplyKeyboardRemove())

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@order_router.message(OrderStates.entering_address, F.text)
async def receive_address_text(message: types.Message, state: FSMContext):
    address_str = message.text.strip()
    if not address_str:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å.")
        return

    await state.update_data(address=address_str)
    # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã/–æ—Ñ–∏—Å–∞
    await state.set_state(OrderStates.entering_apartment)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã (–∏–ª–∏ –ø–æ–¥—ä–µ–∑–¥–∞, –æ—Ñ–∏—Å–∞):",
        reply_markup=ReplyKeyboardRemove()
    )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ ---
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 1. –ö–Ω–æ–ø–∫–∞ ¬´‚úÖ‚ÄØ–î–∞¬ª¬†‚Üí —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º apt_msg_id
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@order_router.callback_query(OrderStates.confirming_address,
                             F.data == "address_ok")
async def address_ok(callback: CallbackQuery,
                     state: FSMContext,
                     session: AsyncSession):

    data = await state.get_data()
    last_msg_id = data.get("confirm_addr_msg_id")   # —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´–í—Å—ë –≤–µ—Ä–Ω–æ?¬ª

    # —É–¥–∞–ª—è–µ–º –µ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–æ—Å—å
    if last_msg_id:
        try:
            await callback.bot.delete_message(callback.message.chat.id, last_msg_id)
        except Exception:
            pass

    # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã
    ask_msg = await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã (–∏–ª–∏ –ø–æ–¥—ä–µ–∑–¥–∞, –æ—Ñ–∏—Å–∞):",
        reply_markup=ReplyKeyboardRemove()
    )

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Üí –ø–æ—Ç–æ–º —É–¥–∞–ª–∏–º
    await state.update_data(apt_msg_id=ask_msg.message_id)
    await state.set_state(OrderStates.entering_apartment)
    await callback.answer()           # –∑–∞–∫—Ä—ã–≤–∞–µ–º ¬´—á–∞—Å–∏–∫–∏¬ª –Ω–∞ –∫–Ω–æ–ø–∫–µ


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª¬†‚Üí —É–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å, –¥–æ–±–∞–≤–ª—è–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—É
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã / –ø–æ–¥—ä–µ–∑–¥–∞ --------------------------------
@order_router.message(OrderStates.entering_apartment)
async def receive_apartment(message: types.Message, state: FSMContext):

    apartment = message.text.strip()

    data        = await state.get_data()
    full_addr   = data["address"]
    apt_msg_id  = data.get("apt_msg_id")        # ID –≤–æ–ø—Ä–æ—Å–∞ ¬´–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã¬ª

    # –¥–æ–ø–∏—Å—ã–≤–∞–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—É –∫ –∞–¥—Ä–µ—Å—É
    if apartment:
        full_addr += f", –∫–≤./–æ—Ñ–∏—Å {apartment}"
    await state.update_data(address=full_addr)

    # —É–¥–∞–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É ¬´–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã¬ª
    if apt_msg_id:
        try:
            await message.bot.delete_message(message.chat.id, apt_msg_id)
        except Exception:
            pass

    # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.set_state(OrderStates.entering_phone)

    phone_msg = await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ üëá",
        reply_markup=phone_keyboard()
    )

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ–±—ã ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª –∑–Ω–∞–ª –æ—Ç–∫—É–¥–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ —á—Ç–æ —É–¥–∞–ª–∏—Ç—å
    await state.update_data(
        phone_back="apartment",            # –≤–µ—Ä–Ω—ë–º—Å—è –∫ —ç—Ç–æ–º—É —à–∞–≥—É
        phone_msg_id=phone_msg.message_id  # —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å
    )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ ---
@order_router.callback_query(OrderStates.confirming_address, F.data == "address_manual")
async def address_manual(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_msg_id = data.get("confirm_addr_msg_id")
    try:
        await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=last_msg_id)
    except Exception:
        pass
    await state.set_state(OrderStates.entering_address)
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é:")

# ‚îÄ‚îÄ‚îÄ ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª —Å–æ —Å—Ç–∞–¥–∏–∏ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@order_router.message(OrderStates.entering_phone, F.text == BACK_PHONE_TXT)
async def phone_back(message: types.Message,
                     state: FSMContext,
                     session: AsyncSession):

    data          = await state.get_data()
    back_where    = data.get("phone_back")          # "apartment" | "delivery" | None
    last_msg_id   = data.get("last_msg_id")         # –∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–∫–∞–∑–∞
    phone_msg_id  = data.get("phone_msg_id")        # ¬´–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä‚Ä¶¬ª

    # 1. –£–¥–∞–ª—è–µ–º –ø—É–∑—ã—Ä—ë–∫ ¬´–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä‚Ä¶¬ª
    if phone_msg_id:
        try:
            await message.bot.delete_message(message.chat.id, phone_msg_id)
        except Exception:
            pass

    # 2. –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª
    try:
        await message.bot.delete_message(message.chat.id, message.message_id)
    except Exception:
        pass

    # 3. –ü—Ä—è—á–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–Ω–µ–≤–∏–¥–∏–º—ã–π —Å–∏–º–≤–æ–ª)
    await message.answer("\u2063", reply_markup=ReplyKeyboardRemove())

    # ============= –í–û–ó–í–†–ê–¢ –ö –®–ê–ì–£ ¬´–ö–í–ê–†–¢–ò–†–ê¬ª ============================
    if back_where == "apartment":
        # —Å—Ç–∞—Ä—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–∫–∞–∑–∞ —É–¥–∞–ª—è–µ–º, –µ—Å–ª–∏ –±—ã–ª–∞
        if last_msg_id:
            try:
                await message.bot.delete_message(message.chat.id, last_msg_id)
            except Exception:
                pass

        await state.set_state(OrderStates.entering_apartment)
        await state.update_data(phone_back=None, phone_msg_id=None)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã (–∏–ª–∏ –ø–æ–¥—ä–µ–∑–¥–∞, –æ—Ñ–∏—Å–∞):")
        return

    # ============= –í–û–ó–í–†–ê–¢ –ö –í–´–ë–û–†–£ –î–û–°–¢–ê–í–ö–ò ===========================
    # 4. –°–Ω–æ—Å–∏–º –∫–∞—Ä—Ç–æ—á–∫—É ¬´–°–∞–º–æ–≤—ã–≤–æ–∑/–ö—É—Ä—å–µ—Ä¬ª, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
    if last_msg_id:
        try:
            await message.bot.delete_message(message.chat.id, last_msg_id)
        except Exception:
            pass

    # 5. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ ‚Äî –¥–µ–ª–∞–µ–º summary ¬´—á–∏—Å—Ç—ã–º¬ª
    await state.update_data(
        delivery=None,
        address=None,
        delivery_cost=0,
        distance_km=None,
        phone_back=None,
        phone_msg_id=None
    )

    # 6. –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
    data = await state.get_data()
    user_salon_id = data.get("user_salon_id")
    summary = await get_order_summary(session, user_salon_id, data) if user_salon_id else ""

    new_msg = await message.answer(
        summary + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=get_delivery_kb(),
        parse_mode="HTML"
    )

    # 7. –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–æ—Å—Ç–∞–≤–∫–∏
    await state.update_data(last_msg_id=new_msg.message_id)
    await state.set_state(OrderStates.choosing_delivery)




# --- –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: –∏ –∫–æ–Ω—Ç–∞–∫—Ç, –∏ —Ç–µ–∫—Å—Ç ---
@order_router.message(OrderStates.entering_phone)
async def enter_phone(message: types.Message, state: FSMContext, session: AsyncSession):
    # --- –æ–ø—Ä–µ–¥–µ–ª—è–µ–º phone ---
    phone = message.contact.phone_number if (message.contact and message.contact.phone_number) \
            else message.text.strip()

    data        = await state.get_data()
    last_msg_id = data.get("last_msg_id")
    await state.update_data(phone=phone)
    await state.set_state(OrderStates.confirming_order)

    user_salon_id = data.get("user_salon_id")

    # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏—Ç–æ–≥, –µ—Å–ª–∏ –±—ã–ª
    if last_msg_id:
        try:
            await message.bot.delete_message(message.chat.id, last_msg_id)
        except Exception:
            pass

    # ‚ù∂ —Å–Ω–∞—á–∞–ª–∞ ¬´—Å–ø–∞—Å–∏–±–æ¬ª + —É–±–∏—Ä–∞–µ–º Reply‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ, –Ω–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω!",
        reply_markup=ReplyKeyboardRemove()
    )

    # ‚ù∑ –ø–æ—Ç–æ–º —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–±–∑–æ—Ä –∑–∞–∫–∞–∑–∞ + inline‚Äë–∫–Ω–æ–ø–∫–∏
    summary = await get_order_summary(session, user_salon_id, {**data, "phone": phone}) if user_salon_id else ""

    msg = await message.answer(
        summary + "\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑!",
        reply_markup=get_confirm_kb(),
        parse_mode="HTML"
    )
    await state.update_data(last_msg_id=msg.message_id)


@order_router.callback_query(OrderStates.confirming_order, F.data == "confirm_order")
async def confirm_order(callback: CallbackQuery,
                        state: FSMContext,
                        session: AsyncSession):

    # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    user_salon_id = data.get("user_salon_id")

    # 2. –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cart_items = await orm_get_user_carts(session, user_salon_id) if user_salon_id else []

    # 3. –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞ –∏ –µ—Å—Ç—å salon ‚Äî –æ—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑
    if user_salon_id and cart_items:
        order = await orm_create_order(
            session,
            user_salon_id=user_salon_id,
            address=data.get("address"),
            phone=data.get("phone"),
            payment_method=data.get("payment_method"),
            cart_items=cart_items,
        )
        # 4. –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∞–ª–æ–Ω –î–û –æ—á–∏—Å—Ç–∫–∏ FSM –∏ –∫–æ—Ä–∑–∏–Ω—ã!
        await notify_salon_about_order(callback, state, session)
        # 5. –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await orm_clear_cart(session, user_salon_id)
        # 6. –£–±–∏—Ä–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except Exception:
            pass
        # 7. –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∫–ª–∏–µ–Ω—Ç–∞
        await callback.message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç üëç")
        await state.clear()
    else:
        await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω —Å–∞–ª–æ–Ω. –ó–∞–∫–∞–∑ –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω.")
        await state.clear()

    await callback.answer()





@order_router.callback_query(F.data == "back_to_cart")
async def back_to_cart(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    await state.clear()                     # ‚ë† –æ—á–∏—Å—Ç–∏–ª–∏ —Å—Ä–∞–∑—É

    user_id = callback.from_user.id
    image, kbds = await get_menu_content(
        session=session,
        level=3, menu_name="main",
        page=1, user_id=user_id
    )

    try:
        await callback.message.delete()
    except Exception:
        pass

    await callback.message.answer_photo(
        photo=image.media,
        caption=image.caption,
        reply_markup=kbds,
        parse_mode="HTML"
    )



def get_map_link(lat, lon):
    return f"https://maps.google.com/?q={lat},{lon}"


# --- –î–æ—Å—Ç–∞–≤–∫–∞: –°–∞–º–æ–≤—ã–≤–æ–∑ ---
@order_router.callback_query(OrderStates.choosing_delivery, F.data == "delivery_pickup")
async def choose_delivery_pickup(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    last_msg_id = data["last_msg_id"]

    user_salon_id = data.get("user_salon_id")
    user = await session.get(UserSalon, user_salon_id) if user_salon_id else await orm_get_user(session, callback.from_user.id)
    if user and not user_salon_id:
        user_salon_id = user.id
        await state.update_data(user_salon_id=user_salon_id)
    salon = await orm_get_salon_by_id(session, user.salon_id) if user else None

    # --- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—É, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ---
    if salon.latitude and salon.longitude:
        address = f'<a href="https://maps.google.com/?q={salon.latitude},{salon.longitude}">–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ</a>'
    else:
        address = "–ê–¥—Ä–µ—Å —Å–∞–ª–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω"

    await state.update_data(
        delivery="delivery_pickup",
        delivery_cost=0,
        address=address,
        distance_km=None
    )

    summary = await get_order_summary(session, user_salon_id, {
        **data,
        "delivery": "delivery_pickup",
        "delivery_cost": 0,
        "address": address,
        "distance_km": None
    }) if user_salon_id else ""

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—É–º–º—É –∑–∞–∫–∞–∑–∞, –±–µ–∑ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!
    try:
        await callback.bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=last_msg_id,
            text=summary,
            reply_markup=None,
            parse_mode="HTML",
            disable_web_page_preview=True   # –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ª–∏—à–Ω–µ–π "–∫–∞—Ä—Ç–æ—á–∫–∏" –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        )
    except Exception:
        await callback.message.answer(
            summary,
            parse_mode="HTML",
            disable_web_page_preview=True
        )

    # –°—Ä–∞–∑—É –ø—Ä–æ—Å–∏–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!
    await state.set_state(OrderStates.entering_phone)

    phone_msg = await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ üëá",
        reply_markup=phone_keyboard()
    )

    # ‚¨áÔ∏è –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º –∫–ª–∞–¥—ë–º –æ–±–∞ –ø–æ–ª—è
    await state.update_data(
        phone_back="delivery",  # ‚Üê –∫—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –ø—Ä–∏ ¬´–ù–∞–∑–∞–¥¬ª
        phone_msg_id=phone_msg.message_id
    )

# --- ¬´–ù–∞–∑–∞–¥¬ª —Å —ç–∫—Ä–∞–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–≤–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞) ---
@order_router.callback_query(OrderStates.confirming_order, F.data == "back_to_phone")
async def back_to_phone(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_msg_id = data.get("last_msg_id")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–º –∑–∞–∫–∞–∑–∞, —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
    if last_msg_id:
        try:
            await callback.bot.delete_message(
                chat_id=callback.message.chat.id,
                message_id=last_msg_id
            )
        except Exception:
            pass

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞–¥–∏–∏ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.set_state(OrderStates.entering_phone)
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ üëá",
        reply_markup=phone_keyboard()
    )

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º ¬´—á–∞—Å–∏–∫–∏¬ª –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await callback.answer()





