# handlersadm/create_salon.py
from __future__ import annotations
from sqlalchemy import select
from io import BytesIO
import qrcode
from aiogram.utils.i18n import I18n
from aiogram import F, Router, types
from aiogram.filters import Command, Filter, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from aiogram.utils.i18n import I18n
from aiogram.utils.keyboard import InlineKeyboardBuilder

from sqlalchemy.ext.asyncio import AsyncSession
from database.models import User

from database.orm_query import (
    orm_create_salon,
    init_default_salon_content,
    orm_add_user,
)
from filters.chat_types import ChatTypeFilter
from utils.slug import generate_unique_slug
from utils.i18n import _
# –†–æ—É—Ç–µ—Ä –¥–ª—è –∏–Ω–≤–∞–π—Ç–æ–≤ ‚Äî –ø–æ–¥–∫–ª—é—á–∞–π –≤ main.py –¥–æ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ä—Ç-—Ö–µ–Ω–¥–ª–µ—Ä–∞
invite_creation_router = Router()
invite_creation_router.message.filter(ChatTypeFilter(["private"]))  # —Ç–æ–ª—å–∫–æ –ª–∏—á–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
# –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ù–ï –≤–µ—à–∞–µ–º ChatTypeFilter –Ω–∞ callback_query

# --- –§–∏–ª—å—Ç—Ä –¥–ª—è /start —Å payload "invite_..." ---
class InviteFilter(Filter):
    """Allow /start only when payload starts with a given prefix (default: 'invite_')."""
    def __init__(self, prefix: str = "invite_") -> None:
        self.prefix = prefix

    async def __call__(self, message: types.Message) -> bool:
        text = message.text or ""
        parts = text.split(maxsplit=1)
        if len(parts) != 2:
            return False  # –Ω—É–∂–µ–Ω payload
        payload = parts[1]
        return payload.lower().startswith(self.prefix.lower())

class AddSalon(StatesGroup):
    language = State()
    name = State()
    slug = State()
    currency = State()
    timezone = State()
    phone = State()  # —à–∞–≥ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞

# --- –í–∞–ª—é—Ç—ã ---
# --- –í–∞–ª—é—Ç—ã ---
def get_currency_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ÇΩ RUB", callback_data="currency_RUB"),  # –†–æ—Å—Å–∏—è
            InlineKeyboardButton(text="$ USD", callback_data="currency_USD"),  # –û–ê–≠ (–¥–æ–ª–ª–∞—Ä—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–∞—Ü.)
            InlineKeyboardButton(text="‚Ç¨ EUR", callback_data="currency_EUR"),  # –®–≤–µ—Ü–∏—è (–¥–ª—è –µ–≤—Ä–æ-–∑–æ–Ω)
        ],
        [
            InlineKeyboardButton(text="üá∏üá™ SEK", callback_data="currency_SEK"),  # –®–≤–µ—Ü–∏—è ‚Äî –∫—Ä–æ–Ω–∞
            InlineKeyboardButton(text="üá∫üá¶ UAH", callback_data="currency_UAH"),  # –£–∫—Ä–∞–∏–Ω–∞ ‚Äî –≥—Ä–∏–≤–Ω–∞
            InlineKeyboardButton(text="üá∞üáø KZT", callback_data="currency_KZT"),  # –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω ‚Äî —Ç–µ–Ω–≥–µ
        ],
        [
            InlineKeyboardButton(text="üá∞üá¨ KGS", callback_data="currency_KGS"),  # –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω ‚Äî —Å–æ–º
            InlineKeyboardButton(text="üá∫üáø UZS", callback_data="currency_UZS"),  # –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω ‚Äî —Å—É–º
            InlineKeyboardButton(text="üá¶üá™ AED", callback_data="currency_AED"),  # –û–ê–≠ ‚Äî –¥–∏—Ä—Ö–∞–º
        ]
    ])
    return kb


# --- –¢–∞–π–º-–∑–æ–Ω—ã (—Ñ–∏–∫—Å) ---
TIMEZONES = [
    ("Europe/Stockholm", "üá∏üá™ –®–≤–µ—Ü–∏—è ‚Äî –°—Ç–æ–∫–≥–æ–ª—å–º"),
    ("Europe/Moscow",    "üá∑üá∫ –†–æ—Å—Å–∏—è ‚Äî –ú–æ—Å–∫–≤–∞"),
    ("Europe/Kyiv",      "üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞ ‚Äî –ö–∏–µ–≤"),
    ("Asia/Tashkent",    "üá∫üáø –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω ‚Äî –¢–∞—à–∫–µ–Ω—Ç"),
    ("Asia/Almaty",      "üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω ‚Äî –ê–ª–º–∞—Ç—ã"),
    ("Asia/Bishkek",     "üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω ‚Äî –ë–∏—à–∫–µ–∫"),
    ("Asia/Dubai",       "üá¶üá™ –û–ê–≠ ‚Äî –î—É–±–∞–π"),
]

def get_tz_fixed_kb() -> InlineKeyboardMarkup:
    kb = [[InlineKeyboardButton(text=label, callback_data=f"tz_pick:{tz}")]
          for tz, label in TIMEZONES]
    return InlineKeyboardMarkup(inline_keyboard=kb)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ ---
def contact_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

# ================== –°–¢–ê–†–¢ –ü–û –ò–ù–í–ê–ô–¢–£ (–¢–û–õ–¨–ö–û invite_...) ==================
@invite_creation_router.message(CommandStart(), InviteFilter())  # prefix –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = "invite_"
async def start_via_invite(
    message: types.Message,
    state: FSMContext,
    session: AsyncSession,
    i18n: I18n,
) -> None:
    await state.clear()  # –≥–∞—Å–∏–º –≤–∏—Å—è—â–∏–µ —Å—Ç–µ–π—Ç—ã
    user_id = message.from_user.id
    try:
        stmt = select(User).where(User.user_id == user_id)
        user = (await session.execute(stmt)).scalar_one_or_none()
    except AttributeError:
        # Fallback for simple session stubs without execute()
        user = await session.get(User, user_id)
    if user:
        if user.language:
            i18n.ctx_locale.set(user.language)
        await message.answer(
            _("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–ª–æ–Ω–∞:"), reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(AddSalon.name)
        return

    kb = InlineKeyboardBuilder()
    kb.button(text=_("–†—É—Å—Å–∫–∏–π"), callback_data="setlang_ru")
    kb.button(text=_("English"), callback_data="setlang_en")
    kb.adjust(2)
    await message.answer(_("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫"), reply_markup=kb.as_markup())
    await state.set_state(AddSalon.language)

# ================== FSM ==================
@invite_creation_router.callback_query(AddSalon.language, F.data.startswith("setlang_"))
async def invite_set_language(
    callback: types.CallbackQuery,
    state: FSMContext,
    session: AsyncSession,
    i18n: I18n,
) -> None:
    lang = callback.data.split("_", 1)[1]

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    i18n.ctx_locale.set(lang)

    # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    user_id = callback.from_user.id
    try:
        stmt = select(User).where(User.user_id == user_id)
        user = (await session.execute(stmt)).scalar_one_or_none()
    except AttributeError:
        user = await session.get(User, user_id)
    if user:
        user.language = lang
    else:
        session.add(User(user_id=user_id, language=lang))
    await session.commit()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
    await callback.message.delete()
    await callback.answer()

    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–µ–ø–æ—á–∫—É –≤—Ä—É—á–Ω—É—é
    await callback.message.answer(
        _("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–ª–æ–Ω–∞:"), reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AddSalon.name)



@invite_creation_router.callback_query(AddSalon.language)
async def invite_set_language_invalid(callback: types.CallbackQuery) -> None:
    await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", show_alert=True)

@invite_creation_router.message(AddSalon.language)
async def invite_language_message_invalid(message: types.Message) -> None:
    kb = InlineKeyboardBuilder()
    kb.button(text="–†—É—Å—Å–∫–∏–π", callback_data="setlang_ru")
    kb.button(text="English", callback_data="setlang_en")
    kb.adjust(2)
    await message.answer(_("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫"), reply_markup=kb.as_markup())

@invite_creation_router.message(AddSalon.name, F.text)
async def salon_name(message: types.Message, state: FSMContext) -> None:
    name = message.text.strip()
    if len(name) < 2:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        return
    await state.update_data(name=name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ slug –∏–ª–∏ "-" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è')
    await state.set_state(AddSalon.slug)

@invite_creation_router.message(AddSalon.name)
async def salon_name_invalid(message: types.Message) -> None:
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ "–æ—Ç–º–µ–Ω–∞"')

@invite_creation_router.message(AddSalon.slug, F.text)
async def salon_slug(message: types.Message, state: FSMContext, session: AsyncSession) -> None:
    data = await state.get_data()
    name = data["name"]
    slug_raw = message.text.strip()
    slug_source = slug_raw if slug_raw and slug_raw != "-" else name
    slug = await generate_unique_slug(session, slug_source)
    await state.update_data(slug=slug)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É —Å–∞–ª–æ–Ω–∞:", reply_markup=get_currency_kb())
    await state.set_state(AddSalon.currency)

@invite_creation_router.message(AddSalon.slug)
async def salon_slug_invalid(message: types.Message) -> None:
    await message.answer('–í–≤–µ–¥–∏—Ç–µ slug —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ "-" –¥–ª—è –∞–≤—Ç–æ')

# –í–∞–ª—é—Ç–∞ -> —Ç–∞–π–º-–∑–æ–Ω–∞
@invite_creation_router.callback_query(AddSalon.currency, F.data.startswith("currency_"))
async def salon_currency(callback: types.CallbackQuery, state: FSMContext) -> None:
    currency = callback.data.split("_")[-1]
    await state.update_data(currency=currency)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:", reply_markup=get_tz_fixed_kb())
    await state.set_state(AddSalon.timezone)
    await callback.answer()

@invite_creation_router.callback_query(AddSalon.currency)
async def salon_currency_invalid(callback: types.CallbackQuery) -> None:
    await callback.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã", show_alert=True)

# –¢–∞–π–º-–∑–æ–Ω–∞ -> –ø—Ä–æ—Å–∏–º –∫–æ–Ω—Ç–∞–∫—Ç
@invite_creation_router.callback_query(AddSalon.timezone, F.data.startswith("tz_pick:"))
async def tz_pick(callback: types.CallbackQuery, state: FSMContext) -> None:
    tz = callback.data.split(":", 1)[1]
    await state.update_data(timezone=tz)

    await callback.message.delete()
    await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–∞–ª–æ–Ω–∞:",
        reply_markup=contact_keyboard(),
    )
    await state.set_state(AddSalon.phone)
    await callback.answer()

@invite_creation_router.callback_query(AddSalon.timezone)
async def tz_invalid(callback: types.CallbackQuery) -> None:
    await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º-–∑–æ–Ω—É –∫–Ω–æ–ø–∫–∞–º–∏", show_alert=True)

# –ö–æ–Ω—Ç–∞–∫—Ç -> —Å–æ–∑–¥–∞—ë–º —Å–∞–ª–æ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞, —à–ª—ë–º QR
@invite_creation_router.message(AddSalon.phone, F.contact)
async def salon_phone(message: types.Message, state: FSMContext, session: AsyncSession) -> None:
    data = await state.get_data()

    name = data["name"]
    slug = data["slug"]
    currency = data["currency"]
    timezone_name = data["timezone"]

    phone = message.contact.phone_number
    first_name = message.contact.first_name
    last_name = message.contact.last_name

    try:
        salon = await orm_create_salon(session, name, slug, currency, timezone_name)
    except ValueError:
        await message.answer(
            "–°–∞–ª–æ–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–ª–∏ —Å–ª–∞–≥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
            reply_markup=ReplyKeyboardRemove(),
        )
        await state.clear()
        return

    await init_default_salon_content(session, salon.id)

    await orm_add_user(
        session,
        user_id=message.from_user.id,
        salon_id=salon.id,
        first_name=first_name,
        last_name=last_name,
        phone=phone,
        is_salon_admin=True,
    )

    bot_username = (await message.bot.get_me()).username
    link = f"https://t.me/{bot_username}?start={salon.slug}"

    img = qrcode.make(link)
    buf = BytesIO()
    img.save(buf, format="PNG")
    buf.seek(0)

    await message.answer_photo(
        types.BufferedInputFile(buf.getvalue(), filename="qr.png"),
        caption=(
            f"–°–∞–ª–æ–Ω '{salon.name}' —Å–æ–∑–¥–∞–Ω!\n"
            f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {salon.timezone}\n"
            f"{link}"
        ),
        reply_markup=ReplyKeyboardRemove(),
    )

    await state.clear()

@invite_creation_router.message(AddSalon.phone)
async def salon_phone_invalid(message: types.Message) -> None:
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ",
        reply_markup=contact_keyboard(),
    )