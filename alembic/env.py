import asyncio
import os
import sys
from logging.config import fileConfig

from alembic import context
from sqlalchemy.ext.asyncio import async_engine_from_config

# üîß –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

# üîª –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Base –∏ –º–æ–¥–µ–ª–∏
from database.models import Base  # –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å declarative_base()


# Alembic config
config = context.config

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è autogenerate
target_metadata = Base.metadata


def get_url():
    # –ü—É—Ç—å –∫ SQLite-—Ñ–∞–π–ª—É
    return "sqlite+aiosqlite:///my_base.db"


def run_migrations_offline():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL-—Ñ–∞–π–ª–∞ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    url = get_url()
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()


async def run_migrations_online():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –ë–î"""
    connectable = async_engine_from_config(
        config.get_section(config.config_ini_section),
        prefix="sqlalchemy.",
        poolclass=None,
        url=get_url(),  # –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º URL –∑–¥–µ—Å—å
    )

    async with connectable.connect() as connection:
        await connection.run_sync(
            lambda sync_conn: context.configure(
                connection=sync_conn,
                target_metadata=target_metadata,
            )
        )
        async with connection.begin():
            await connection.run_sync(context.run_migrations)


if context.is_offline_mode():
    run_migrations_offline()
else:
    asyncio.run(run_migrations_online())
