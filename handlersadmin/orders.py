from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from database.orm_query import orm_get_orders, orm_get_order, orm_update_order_status
from utils.currency import get_currency_symbol
from utils.timezone import to_timezone
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest

orders_router = Router()

CUSTOMER_STATUS_MSGS = {
    "IN_PROGRESS": "–í–∞—à –∑–∞–∫–∞–∑ #{} –ø—Ä–∏–Ω—è—Ç –∏ –≥–æ—Ç–æ–≤–∏—Ç—Å—è. üßë‚Äçüç≥",
    "DONE": "–í–∞—à –∑–∞–∫–∞–∑ #{} –≤—ã–ø–æ–ª–Ω–µ–Ω. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üòã",
    "CANCELLED": "–í–∞—à –∑–∞–∫–∞–∑ #{} –æ—Ç–º–µ–Ω—ë–Ω. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –ø–æ–º–æ–∂–µ–º! üôè",
}

def build_customer_message(order, new_status: str) -> str:
    # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —É–¥–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏ —Å—É–º–º–æ–π
    salon_obj = getattr(order.user_salon, "salon", None)
    currency_code = getattr(salon_obj, "currency", "RUB")
    local_dt = to_timezone(order.created, getattr(salon_obj, "timezone", None))
    money = f"{order.total:.0f}{get_currency_symbol(currency_code)}"
    header = CUSTOMER_STATUS_MSGS.get(new_status, "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{} –æ–±–Ω–æ–≤–ª—ë–Ω.").format(order.id)
    details = (
        f"\n\n‚è∞ {local_dt:%d.%m %H:%M}"
        f"\nüßæ –°—É–º–º–∞: {money}"
    )
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        item = order.items[0]
        details += f"\nüçï {item.product.name} √ó {item.quantity}"
    except Exception:
        pass
    return header + details

async def notify_customer_status_change(bot, order, new_status: str):
    chat_id = getattr(getattr(order.user_salon, "user", None), "user_id", None)
    if not chat_id:
        return

    text = build_customer_message(order, new_status)

    try:
        # –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–µ–∑ inline-–∫–Ω–æ–ø–æ–∫
        await bot.send_message(chat_id=chat_id, text=text)
    except TelegramForbiddenError:
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
        pass
    except TelegramBadRequest:
        # –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–≤–µ—Ä–Ω—ã–π chat_id –∏ —Ç.–ø.
        pass


# –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
STATUS_LABELS_RU = {
    "NEW": "–ù–æ–≤—ã–π",
    "IN_PROGRESS": "–í —Ä–∞–±–æ—Ç–µ",
    "DONE": "–ó–∞–≤–µ—Ä—à—ë–Ω",
    "CANCELLED": "–û—Ç–º–µ–Ω—ë–Ω",
}

def order_action_kb(order_id: int, status: str) -> InlineKeyboardMarkup:
    buttons: list[InlineKeyboardButton] = []

    if status == "NEW":
        buttons.append(
            InlineKeyboardButton(
                text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                callback_data=f"accept_{order_id}"
            )
        )

    if status == "IN_PROGRESS":
        buttons.append(
            InlineKeyboardButton(
                text="üèÅ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
                callback_data=f"done_{order_id}"
            )
        )

    if status in ("NEW", "IN_PROGRESS"):
        buttons.append(
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data=f"cancel_{order_id}"
            )
        )

    # ¬´–ù–∞–∑–∞–¥¬ª
    buttons.append(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_orders")
    )

    return InlineKeyboardMarkup(inline_keyboard=[buttons])


def orders_kb(orders):
    buttons = []
    for o in orders:
        salon_rel = getattr(o, "user_salon", None)
        salon_obj = getattr(salon_rel, "salon", None)
        local_dt = to_timezone(o.created, getattr(salon_obj, "timezone", None))
        time = local_dt.strftime("%H:%M")
        currency_code = getattr(salon_obj, "currency", "RUB")
        currency = get_currency_symbol(currency_code)
        status_ru = STATUS_LABELS_RU.get(o.status, o.status)
        buttons.append([
            InlineKeyboardButton(
                text=f"#{o.id} ‚Ä¢ {time} ‚Ä¢ {status_ru} ‚Ä¢ {int(o.total)}{currency}",
                callback_data=f"order_{o.id}"
            )
        ])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="admin_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@orders_router.callback_query(F.data == "admin_orders")
async def show_orders(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    message_id = data.get("main_message_id") or callback.message.message_id
    salon_id = data.get("salon_id")
    await state.clear()
    await state.update_data(main_message_id=message_id, salon_id=salon_id)

    orders = await orm_get_orders(session, salon_id)
    await callback.bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=message_id,
        text="–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:",
        reply_markup=orders_kb(orders),
    )
    await callback.answer()


def order_detail_kb(order_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_orders")],
        ]
    )


@orders_router.callback_query(F.data.regexp(r"^order_(\d+)$"))
async def show_order_detail(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    # 1) –∏–∑–≤–ª–µ–∫–∞–µ–º id –∑–∞–∫–∞–∑–∞ –∏ salon_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    order_id = int(callback.data.split("_")[-1])
    data = await state.get_data()
    salon_id = data.get("salon_id")
    if salon_id is None:
        return await callback.answer("–°–∞–ª–æ–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω", show_alert=True)

    # 2) –±–µ—Ä—ë–º –∑–∞–∫–∞–∑ —Å—Ç—Ä–æ–≥–æ –≤ —Ä–∞–º–∫–∞—Ö —Å–∞–ª–æ–Ω–∞
    order = await orm_get_order(session, order_id, salon_id)
    if not order:
        return await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

    # 3) —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ
    salon_obj = getattr(order.user_salon, "salon", None)
    currency_code = getattr(salon_obj, "currency", "RUB")
    local_dt = to_timezone(order.created, getattr(salon_obj, "timezone", None))
    status_ru = STATUS_LABELS_RU.get(order.status, order.status)

    first_item = order.items[0] if getattr(order, "items", None) else None
    item_line = (
        f"üçï {first_item.product.name} √ó {first_item.quantity}\n"
        if first_item else ""
    )

    text = (
        f"–ó–∞–∫–∞–∑ #{order.id}\n"
        f"{local_dt:%d.%m %H:%M}\n"
        f"{getattr(order.user_salon, 'first_name', '')} / {order.phone or '-'}\n"
        f"{item_line}"
        f"{order.address or ''}\n"
        f"–°—Ç–∞—Ç—É—Å: {status_ru}\n"
        f"–ò—Ç–æ–≥–æ: {order.total:.0f}{get_currency_symbol(currency_code)}"
    )

    # 4) —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º ¬´–≥–ª–∞–≤–Ω–æ–µ¬ª –∞–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_id = data.get("main_message_id") or callback.message.message_id
    try:
        await callback.bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=message_id,
            text=text,
            reply_markup=order_action_kb(order.id, order.status),
            parse_mode="HTML",
        )
    except TelegramBadRequest as e:
        # –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç/–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å ‚Äî –Ω–µ –ø–∞–¥–∞–µ–º
        if "message is not modified" in str(e):
            await callback.answer("–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        else:
            raise

    await callback.answer()

@orders_router.callback_query(F.data.regexp(r"^(accept|done|cancel)_(\d+)$"))
async def change_order_status(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    action, order_id_str = callback.data.split("_", 1)
    order_id = int(order_id_str)

    status_map = {
        "accept": "IN_PROGRESS",
        "done": "DONE",
        "cancel": "CANCELLED",
    }
    new_status = status_map.get(action)
    if not new_status:
        return await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)

    data = await state.get_data()
    salon_id = data.get("salon_id")
    if salon_id is None:
        return await callback.answer("–°–∞–ª–æ–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω", show_alert=True)

    # 1) –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–æ–≥–æ –≤ —Ä–∞–º–∫–∞—Ö —Å–∞–ª–æ–Ω–∞
    await orm_update_order_status(session, order_id, salon_id, new_status)

    # 2) –ë–µ—Ä—ë–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∑–∞–∫–∞–∑ —É–∂–µ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —Å–∞–ª–æ–Ω—É
    order = await orm_get_order(session, order_id, salon_id)
    if not order:
        return await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

    # 3) –ì–æ—Ç–æ–≤–∏–º —Ç–µ–∫—Å—Ç (–±–µ–∑–æ–ø–∞—Å–Ω–æ –∫ –ø—É—Å—Ç—ã–º –ø–æ–∑–∏—Ü–∏—è–º)
    salon_obj = getattr(order.user_salon, "salon", None)
    currency_code = getattr(salon_obj, "currency", "RUB")
    local_dt = to_timezone(order.created, getattr(salon_obj, "timezone", None))
    status_ru = STATUS_LABELS_RU.get(order.status, order.status)

    first_item = order.items[0] if getattr(order, "items", None) else None
    item_line = (
        f"üçï {first_item.product.name} √ó {first_item.quantity}\n" if first_item else ""
    )

    text = (
        f"–ó–∞–∫–∞–∑ #{order.id}\n"
        f"{local_dt:%d.%m %H:%M}\n"
        f"{getattr(order.user_salon, 'first_name', '')} / {order.phone or '-'}\n"
        f"{item_line}"
        f"{order.address or ''}\n"
        f"–°—Ç–∞—Ç—É—Å: {status_ru}\n"
        f"–ò—Ç–æ–≥–æ: {order.total:.0f}{get_currency_symbol(currency_code)}"
    )

    # 4) –ü–µ—Ä–µ–æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_id = data.get("main_message_id") or callback.message.message_id
    try:
        await callback.bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=message_id,
            text=text,
            reply_markup=order_action_kb(order.id, order.status),
            parse_mode="HTML",
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise

    # 5) –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
    await notify_customer_status_change(callback.bot, order, new_status)

    await callback.answer(f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {status_ru}")