from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
    Message,
)
from aiogram.client.bot import Bot
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import Salon
from database.orm_query import orm_get_user

admin_menu_router = Router()

def admin_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_add_product")],
            [InlineKeyboardButton(text="üìã –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç", callback_data="admin_products")],
            [InlineKeyboardButton(text="üé® –î–æ–±–∞–≤–∏—Ç—å/–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä", callback_data="admin_banners")],
            [InlineKeyboardButton(text="üè† –°–æ–∑–¥–∞—Ç—å —Å–∞–ª–æ–Ω", callback_data="admin_create_salon")],
        ]
    )

async def show_admin_menu(state: FSMContext, chat_id: int, bot: Bot, session: AsyncSession):
    data = await state.get_data()
    message_id = data.get("main_message_id")

    # –ü–æ–ª—É—á–∞–µ–º salon_id –∏–∑ FSMContext –∏–ª–∏ –∏–∑ –±–∞–∑—ã –ø–æ user_id
    salon_id = data.get("salon_id")
    if not salon_id:
        # fallback: –±–µ—Ä–µ–º salon_id –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await orm_get_user(session, chat_id)
        salon_id = user.salon_id if user else None
        if salon_id:
            await state.update_data(salon_id=salon_id)

    salon_name = "–°–∞–ª–æ–Ω"
    if salon_id:
        salon = await session.get(Salon, salon_id)
        if salon:
            salon_name = salon.name

    text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å <b>{salon_name}</b>!"
    kb = admin_keyboard()

    # –ù–∞–¥–µ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–∏: —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ç–µ–∫—Å—Ç/–º–µ–¥–∏–∞
    if message_id:
        try:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                reply_markup=kb,
                parse_mode="HTML",
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –º–µ–¥–∏–∞), —É–¥–∞–ª—è–µ–º –∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ
            await bot.delete_message(chat_id, message_id)
            msg = await bot.send_message(chat_id, text, reply_markup=kb, parse_mode="HTML")
            await state.update_data(main_message_id=msg.message_id)
    else:
        msg = await bot.send_message(chat_id, text, reply_markup=kb, parse_mode="HTML")
        await state.update_data(main_message_id=msg.message_id)

@admin_menu_router.message(Command("admin"))
async def open_admin(message: Message, state: FSMContext, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º user –∏ –µ–≥–æ salon_id, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ FSM (–¥–ª—è –±—É–¥—É—â–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤)
    user = await orm_get_user(session, message.from_user.id)
    salon_id = user.salon_id if user else None
    if salon_id:
        await state.update_data(salon_id=salon_id)
    await show_admin_menu(state, message.chat.id, message.bot, session)

@admin_menu_router.callback_query(F.data == "admin_menu")
async def cb_admin_menu(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    await show_admin_menu(state, callback.message.chat.id, callback.bot, session)
    await callback.answer()
